# CODE FUNCTION: Implementation of the Naive Bayes Algorithm - Artifical Intelligence
# STUDY AREA: Student's Grade Prediction. Artificial Intelligence Applied to Educational
# ARTIFICIAL INTELLIGENCE AREA: Machine Learning
# LANGUAGE: Python
# OBJECT: Pragmatic code segment of Artificial Intelligence. A research approach of the IA 
# AUTHOR: Héctor Alonso-Misol Gerlache
# DATE: Dec 2020
def naivebayes (df, predictora):
    # Distribution of the train and test data
    X_train, X_test = train_test_split (df, test_size = 0.2, random_state=1976)
    y_train = X_train[predictora]
    y_test = X_test[predictora]
    
    # Classifier
    modelo = BernoulliNB(alpha = 1.0, binarize = True, fit_prior = False, class_prior = None)
    
    # Train the data and predict
    modelo.fit (X_train, y_train)
    y_predict = modelo.predict(X_test)
    
    # Proximity percentage
    print (accuracy_score(y_test, y_predict)*100)
    
    # Conffusion matrix
    print(confusion_matrix(y_test, y_predict)) 
    print ('Precisión obtenida en el dataset de entranamiento: {:.2f}'.format(modelo.score(X_train, y_train)))
    print ('Precisión obtenida en el dataset de test: {:.2f}'.format(modelo.score(X_test, y_test)))
    print('Cantidad de errores de clasificación sobre un total de {0} casos: {1}'
      .format(y_test.shape[0],(y_test != y_predict).sum()))
    print("Efectividad del algoritmo: {0: .2f}"
      .format(1 - (y_test != y_predict).sum()/y_test.shape[0]))
      
# Call the Naive Bayes function      
naivebayes (df_final_calification, 'FINAL_CALIFICATION')
